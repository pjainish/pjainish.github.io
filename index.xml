<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jainish's Log</title><link>https://pjainish.github.io/</link><description>Recent content on Jainish's Log</description><generator>Hugo -- 0.134.3</generator><language>en-us</language><lastBuildDate>Sat, 21 Dec 2024 19:45:51 +0530</lastBuildDate><atom:link href="https://pjainish.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker Architecture</title><link>https://pjainish.github.io/posts/devops/docker-architecture/</link><pubDate>Sat, 21 Dec 2024 19:45:51 +0530</pubDate><guid>https://pjainish.github.io/posts/devops/docker-architecture/</guid><description>&lt;p>Docker, a leading containerization platform, simplifies the process of developing, shipping, and running applications by providing a robust and flexible architecture. Here is a detailed overview of the various components and features of Docker&amp;rsquo;s architecture.&lt;/p>
&lt;h3 id="client-server-architecture">Client-Server Architecture&lt;/h3>
&lt;p>At the heart of Docker&amp;rsquo;s architecture is a client-server model. In this setup, the Docker client interacts with the Docker daemon, also known as &lt;code>dockerd&lt;/code>. This client-server architecture allows for flexibility in how the client and daemon are deployed. They can either run on the same host or communicate remotely over a network interface or UNIX sockets. This flexibility is crucial for both local development and distributed environments.&lt;/p></description></item><item><title>Role of Docker in Devops</title><link>https://pjainish.github.io/posts/devops/role-of-docker-in-devops/</link><pubDate>Sat, 21 Dec 2024 19:26:09 +0530</pubDate><guid>https://pjainish.github.io/posts/devops/role-of-docker-in-devops/</guid><description>&lt;h2 id="introduction-to-docker-and-devops">Introduction to Docker and DevOps&lt;/h2>
&lt;p>In the modern landscape of software development, the integration of Docker and DevOps has revolutionized the way applications are built, deployed, and managed. To understand the role of Docker in DevOps, it&amp;rsquo;s essential to start with the basics of both concepts.&lt;/p>
&lt;h3 id="what-is-docker">What is Docker?&lt;/h3>
&lt;p>Docker is a containerization platform that allows developers to package their applications and all their dependencies into a single container. This container can then be run on any system that supports Docker, ensuring consistency and portability.&lt;/p></description></item><item><title>Microservices With Docker</title><link>https://pjainish.github.io/posts/devops/microservices-with-docker/</link><pubDate>Sat, 21 Dec 2024 19:16:37 +0530</pubDate><guid>https://pjainish.github.io/posts/devops/microservices-with-docker/</guid><description>&lt;p>Here is the revised blog content without citations:&lt;/p>
&lt;h2 id="introduction-to-microservices">Introduction to Microservices&lt;/h2>
&lt;h3 id="definition-and-overview">Definition and Overview&lt;/h3>
&lt;p>Microservices architecture is an approach to software development where an application is composed of small, independent services that communicate with each other. Each microservice is responsible for a specific business capability and can be developed, deployed, and scaled independently. This architecture has gained popularity due to its ability to enhance scalability, flexibility, and maintainability of complex systems.&lt;/p></description></item><item><title>Virtualization vs Containerization</title><link>https://pjainish.github.io/posts/devops/virtualization-vs-containerization/</link><pubDate>Sat, 21 Dec 2024 19:03:05 +0530</pubDate><guid>https://pjainish.github.io/posts/devops/virtualization-vs-containerization/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the modern IT landscape, two technologies have revolutionized the way we deploy, manage, and scale applications: virtualization and containerization. Understanding the differences between these technologies is crucial for making informed decisions about your infrastructure and application deployment strategies. This blog will provide a detailed comparative analysis of virtualization and containerization, covering their definitions, types, benefits, use cases, and key differences.&lt;/p>
&lt;h2 id="what-is-virtualization">What is Virtualization?&lt;/h2>
&lt;h3 id="definition">Definition&lt;/h3>
&lt;p>Virtualization involves creating a virtual version of a physical resource, such as a server, storage device, or network. This technology allows multiple virtual environments or operating systems to run on a single physical machine, enhancing resource utilization and flexibility.&lt;/p></description></item><item><title>Introduction to Docker and Containerization</title><link>https://pjainish.github.io/posts/devops/introduction-to-docker/</link><pubDate>Fri, 20 Dec 2024 20:33:41 +0530</pubDate><guid>https://pjainish.github.io/posts/devops/introduction-to-docker/</guid><description>&lt;h2 id="introduction-to-containerization">Introduction to Containerization&lt;/h2>
&lt;h3 id="definition-and-concept">Definition and Concept&lt;/h3>
&lt;p>Containerization is a lightweight and portable way to deploy applications, ensuring that they run consistently across different environments. Unlike virtualization, which involves running multiple virtual machines (VMs) on a single physical server, each with its own operating system, containerization shares the host systemâ€™s OS kernel. This approach makes containers lighter, faster, and more efficient in resource utilization.&lt;/p>
&lt;h3 id="history-and-evolution">History and Evolution&lt;/h3>
&lt;p>Containerization has its roots in the early 2000s with the introduction of Linux containers (LXC). However, it wasn&amp;rsquo;t until the release of Docker in 2013 that containerization gained widespread adoption. Docker simplified the process of creating, deploying, and managing containers, making it a cornerstone of modern application development and deployment.&lt;/p></description></item><item><title>Basic Docker Commands</title><link>https://pjainish.github.io/posts/devops/basic-docker-commands/</link><pubDate>Fri, 20 Dec 2024 15:47:32 +0530</pubDate><guid>https://pjainish.github.io/posts/devops/basic-docker-commands/</guid><description>&lt;p>Docker and Docker Compose are powerful tools for containerization and orchestration, simplifying the process of developing, deploying, and managing applications. Here is a detailed guide to the various commands you will need to manage your Docker and Docker Compose environments.&lt;/p>
&lt;h3 id="docker-management-commands">Docker Management Commands&lt;/h3>
&lt;p>These commands are essential for managing and understanding your Docker setup.&lt;/p>
&lt;h4 id="general-commands">General Commands&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;code>docker --help&lt;/code>&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Displays help for the Docker CLI and its subcommands. This is a great starting point if you need to understand the available commands and their options.&lt;/li>
&lt;li>Example: &lt;code>docker --help&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>docker -d&lt;/code>&lt;/strong>:&lt;/p></description></item><item><title>How To Install Docker on Ubuntu, Windows, and macOS: A Comprehensive Guide</title><link>https://pjainish.github.io/posts/devops/how-to-install-docker/</link><pubDate>Fri, 20 Dec 2024 15:47:32 +0530</pubDate><guid>https://pjainish.github.io/posts/devops/how-to-install-docker/</guid><description>Master containerized applications with Docker on Linux, Windows &amp;amp; MacOS. Work effectively with images, containers, and Docker repositories.</description></item><item><title>Top 100 Movies</title><link>https://pjainish.github.io/posts/top-100/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pjainish.github.io/posts/top-100/</guid><description>&lt;h3 id="movies-i-have-watched-and-loved--not-in-order">Movies I have watched and Loved !!! Not in order.&lt;/h3>
&lt;ol>
&lt;li>The Silence of the Lambs | &lt;a href="https://www.imdb.com/title/tt0102926/">IMDB&lt;/a> | &lt;a href="https://movielens.org/movies/593">MovieLens&lt;/a> &lt;img alt="image" loading="lazy" src="https://image.tmdb.org/t/p/w185/uS9m8OBk1A8eM9I042bx8XXpqAq.jpg">&lt;/li>
&lt;li>The Godfather&lt;/li>
&lt;/ol></description></item></channel></rss>